{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "bds",
	"patterns": [
		{
			"include": "#code"
		}
	],
	"repository": {
		"code": {
			"patterns": [
				{
					"include": "#comments-inline-hash"
				},
				{
					"include": "#comments-inline-help"
				},
				{
					"include": "#comments-inline-shebang"
				},
				{
					"include": "#comments-inline-slash"
				},
				{
					"include": "#comments-multi-line"
				},
				{
					"include": "#this"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#field"
				},
				{
					"include": "#new"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#strings-double"
				},
				{
					"include": "#strings-single"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#sys"
				},
				{
					"include": "#test"
				}
			]
		},
		"comments-inline-hash": {
			"name": "comment.line.hash.bds",
			"begin": "#",
			"end": "$"
		},
		"comments-inline-help": {
			"name": "string.literal.help",
			"begin": "\\s*(help)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.help.bds"
				}
			},
			"end": "$"
		},
		"comments-inline-shebang": {
			"name": "punctuation.section.embedded",
			"begin": "^#!",
			"end": "$"
		},
		"comments-inline-slash": {
			"name": "comment.line.slash.bds",
			"begin": "\\s*//",
			"end": "$"
		},
		"comments-multi-line": {
			"name": "comment.multi.line.bds",
			"begin": "\\s*\\/\\*",
			"end": "\\*/"
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\bthrow\\b",
					"name": "keyword.control.throw.bds"
				},
				{
					"match": "\\b(breakpoint|case|catch|checkpoint|class|continue|debug|default|else|exit|extends|for|if|print|println|return|switch|task|try|wait|while)\\b",
					"name": "keyword.control.bds"
				},
				{
					"match": "\\b(int|bool|string|void|real)\\b",
					"name": "keyword.control.bds"
				},
				{
					"match": "\\b(true|false)\\b",
					"name": "variable.other.constant"
				},
				{
					"match": "(<<|>>>?|~|\\^)",
					"name": "keyword.operator.bitwise.bds"
				},
				{
					"match": "((&|\\^|\\||<<|>>>?)=)",
					"name": "keyword.operator.assignment.bitwise.bds"
				},
				{
					"match": "(===?|!=|<=|>=|<>|<|>)",
					"name": "keyword.operator.comparison.bds"
				},
				{
					"match": "([+*/%-]=)",
					"name": "keyword.operator.assignment.arithmetic.bds"
				},
				{
					"match": "(:=)",
					"name": "keyword.control.type.inference"
				},
				{
					"match": "(=)",
					"name": "keyword.operator.assignment"
				},
				{
					"match": "\\?|:",
					"name": "keyword.control.ternary.bds"
				},
				{
					"match": "(\\-\\-|\\+\\+)",
					"name": "keyword.operator.increment-decrement.bds"
				},
				{
					"match": "(\\-|\\+|\\*|\\/|%)",
					"name": "keyword.operator.arithmetic.bds"
				},
				{
					"match": "(!|&&|\\|\\|)",
					"name": "keyword.operator.logical.bds"
				},
				{
					"match": "(\\||&)",
					"name": "keyword.operator.bitwise.bds"
				}
			]
		},
		"field": {
			"name": "entity.name.variable",
			"match": "(\\w+)(\\.\\w+)+"
		},
		"function-call": {
			"name": "entity.name.function",
			"begin": "(?!(if|for|task|while))(\\w+)(\\.\\w+)*\\(",
			"patterns": [
				{
					"include": "#code"
				}
			],
			"end": "\\)"
		},
		"new": {
			"name": "meta.new.bds",
			"begin": "\\b(new)\\s+(\\w+)\\(",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.new"
				},
				"2": {
					"name": "entity.name.class"
				}
			},
			"patterns": [
				{
					"include": "#code"
				}
			],
			"end": "\\)"
		},
		"numbers": {
			"patterns": [
				{
					"match": "(?x)\n\\b(?<!\\$)\n0(x|X)\n(\n  (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)\n  |\n  (\n    [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?\n    |\n    ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\n  )\n  [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?\n)\n\\b(?!\\$)",
					"name": "constant.numeric.hex.bds"
				},
				{
					"match": "\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.binary.bds"
				},
				{
					"match": "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.octal.bds"
				},
				{
					"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
					"name": "constant.numeric.decimal.bds"
				}
			]
		},
		"strings-double": {
			"name": "string.quoted.double.bds",
			"begin": "\"",
			"patterns": [
				{
					"name": "entity.name.variable",
					"match": "\\$[\\w\\.\\[\\]\\{\\}\\$\\']*"
				}
			],
			"end": "\""
		},
		"strings-single": {
			"name": "string.quoted.single.bds",
			"begin": "'",
			"end": "'"
		},
		"sys": {
			"name": "string.sys.command",
			"begin": "\\s*(sys|task)\\b\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.sys.bare"
				}
			},
			"patterns": [
				{
					"name": "entity.name.variable",
					"match": "\\$[\\w\\.\\[\\]\\{\\}\\$\\']*"
				}
			],
			"end": "[^\\\\](\\r)?\\n"
		},
		"this": {
			"name": "meta.field.bds",
			"match": "\\b(this\\.)([\\.\\w]+)",
			"captures": {
				"1": {
					"name": "keyword.control.this"
				},
				"2": {
					"name": "entity.name.variable"
				}
			}
		},
		"test": {
			"name": "debug",
			"match": "(zzz)"
		}
	},
	"scopeName": "source.bds"
}