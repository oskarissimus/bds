{
	"name": "BDS",
	"patterns": [
		{
			"match": "\\b-?\\d+\\.?\\d*([eE][-+]?\\d+)?",
			"name": "constant.numeric.float.bds"
		},
		{
			"match": "\\b-?\\d+",
			"name": "constant.numeric.integer.bds"
		},
		{
			"begin": "\\bclass\\b",
			"end": "\\s+([A-Za-z_][A-Za-z0-9_]*)",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.bds"
				}
			},
			"endCaptures": {
				"1": {
					"name": "entity.name.class.bds"
				}
			}
		},
		{
			"begin": "\\b(bool|int|real|string|void)\\b\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\(",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.bds"
				},
				"2": {
					"name": "entity.name.function.bds"
				}
			},
			"patterns": [
				{
					"match": "\\b(bool|int|real|string|void)\\b",
					"name": "storage.type.parameter.bds"
				},
				{
					"match": "[A-Za-z_][A-Za-z0-9_]*",
					"name": "variable.parameter.bds"
				},
				{
					"match": ",",
					"name": "punctuation.separator.parameter.bds"
				}
			]
		},
		{
			"match": "\\b(bool|int|real|string|void|true|false|null|extends|if|else|for|while|try|catch|finally|throw|return|break|breakpoint|checkpoint|debug|exit|print|println|warning|error|kill|wait|switch|task|dep|goal|par|parallel|continue)\\b",
			"name": "keyword.control.bds"
		},
		{
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.block.bds"
		},
		{
			"match": "//.*",
			"name": "comment.line.bds"
		},
		{
			"match": "#.*",
			"name": "comment.line.hash.bds"
		},
		{
			"match": "[-+*/%&|<>!=]|\\+\\+|--|\\|=|&=|/=|\\*=|-=|\\+=|:=|<-|=>",
			"name": "keyword.operator.bds"
		},
		{
			"match": "\\b(include)\\b",
			"name": "keyword.declaration.bds"
		},
		{
			"match": "\\bnew\\b\\s+([A-Za-z_][A-Za-z0-9_]*)",
			"captures": {
				"0": {
					"name": "keyword.control.new.bds"
				},
				"1": {
					"name": "entity.name.class.instantiation.bds"
				}
			}
		},
		{
			"begin": "\"",
			"end": "\"",
			"name": "string.quoted.double.bds",
			"patterns": [
				{
					"match": "\\$[A-Za-z_][A-Za-z0-9_]*",
					"name": "variable.interpolation.bds"
				}
			]
		},
		{
			"begin": "'",
			"end": "'",
			"name": "string.quoted.single.bds",
			"patterns": [
				{
					"match": "\\$[A-Za-z_][A-Za-z0-9_]*",
					"name": "variable.interpolation.bds"
				}
			]
		},
		{
			"match": "\\b(?!(bool|int|real|string|void)\\b)[A-Za-z_][A-Za-z0-9_]*\\b(\\[\\]|\\{})?(?=\\s+[A-Za-z_][A-Za-z0-9_]*;)",
			"name": "entity.name.type.class.bds"
		},
		{
			"match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\b(?![\\s]*\\()",
			"name": "variable.bds"
		},
		{
			"begin": "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*\\(",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.call.bds"
				}
			},
			"patterns": [
				{
					"match": "\\b-?\\d+\\.?\\d*([eE][-+]?\\d+)?",
					"name": "constant.numeric.float.bds"
				},
				{
					"match": "\\b-?\\d+",
					"name": "constant.numeric.integer.bds"
				},
				{
					"match": "[A-Za-z_][A-Za-z0-9_]*",
					"name": "variable.parameter.function.call.bds"
				},
				{
					"begin": "\"",
					"end": "\"",
					"name": "string.quoted.double.function.parameter.bds",
					"patterns": [
						{
							"match": "\\$[A-Za-z_][A-Za-z0-9_]*",
							"name": "variable.interpolation.bds"
						}
					]
				},
				{
					"begin": "'",
					"end": "'",
					"name": "string.quoted.single.function.parameter.bds",
					"patterns": [
						{
							"match": "\\$[A-Za-z_][A-Za-z0-9_]*",
							"name": "variable.interpolation.bds"
						}
					]
				},
				{
					"match": ",",
					"name": "punctuation.separator.parameter.bds"
				}
			]
		}
	],
	"repository": {},
	"scopeName": "source.bds"
}