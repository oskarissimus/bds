{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "bds",
	"patterns": [
		{
			"include": "#statement"
		}
	],
	"repository": {
		"args": {
			"name": "storage.args",
			"match": "(.*)(,(.*))*",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"2": {
					"patterns": [
						{
							"include": "#args"
						}
					]
				}
			}
		},
		"assignment": {
			"name": "meta.expression.assignment.bds",
			"begin": "(\\w+)\\s*(=|:=|\\+=|\\-=|/=|\\*=|\\&=|\\|=)\\s*",
			"beginCaptures": {
				"1": {
					"name": "variable.name.definition.bds"
				},
				"2": {
					"name": "keyword.operator.assignment.bds"
				}
			},
			"end": "$",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"bools": {
			"patterns": [
				{
					"name": "keyword.control.bds",
					"match": "\\b(true|false)\\b"
				}
			]
		},
		"catch-block": {
			"name": "meta.statement.catch.block.bds",
			"begin": "\\b(catch)\\s*\\((.*?)\\)\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.catch"
				},
				"2": {
					"name": "meta.statement.catch.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.catch.block",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "\\}"
		},
		"catch-standalone": {
			"name": "meta.statement.catch.standalone.bds",
			"begin": "\\b(catch)\\s*\\((.*?)\\)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.catch"
				},
				"2": {
					"name": "meta.statement.catch.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.catch.standalone",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "$"
		},
		"class": {
			"name": "meta.class.bds",
			"begin": "(?=\\w?[\\w\\s-]*\\b(?:class)\\s+[\\w$]+)",
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.class.end.bracket.curly.bds"
				}
			},
			"patterns": [
				{
					"match": "(class)\\s+(\\w+)",
					"captures": {
						"1": {
							"name": "storage.modifier.bds"
						},
						"2": {
							"name": "entity.name.type.class.bds"
						}
					},
					"name": "meta.class.identifier.bds"
				},
				{
					"match": "(extends)\\s+(\\w+)",
					"captures": {
						"1": {
							"name": "storage.modifier.bds"
						},
						"2": {
							"name": "entity.name.type.class.bds"
						}
					}
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.class.begin.bracket.curly.bds"
						}
					},
					"end": "(?=})",
					"name": "meta.class.body.bds",
					"patterns": [
						{
							"include": "#statement"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"include": "#comments-multi-line"
				},
				{
					"include": "#comments-inline-shebang"
				},
				{
					"include": "#comments-inline-hash"
				},
				{
					"include": "#comments-inline-help"
				},
				{
					"include": "#comments-inline-slash"
				},
				{
					"include": "#comments-help"
				}
			]
		},
		"comments-inline-hash": {
			"name": "comment.line.hash.bds",
			"begin": "#",
			"end": "$"
		},
		"comments-inline-help": {
			"name": "string.literal.help",
			"begin": "\\s*(help)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.help.bds"
				}
			},
			"end": "$"
		},
		"comments-inline-shebang": {
			"name": "punctuation.section.embedded",
			"begin": "^#!",
			"end": "$"
		},
		"comments-inline-slash": {
			"name": "comment.line.slash.bds",
			"begin": "\\s*//",
			"end": "$"
		},
		"comments-multi-line": {
			"name": "comment.multi.line.bds",
			"begin": "\\s*\\/\\*",
			"end": "\\*/"
		},
		"expression": {
			"name": "meta.expression.bds",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#literals"
				},
				{
					"include": "#sys"
				},
				{
					"include": "#task"
				},
				{
					"include": "#new"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#method-call"
				},
				{
					"include": "#assignment"
				},
				{
					"include": "#pre-increment"
				},
				{
					"include": "#post-increment"
				},
				{
					"include": "#expression-binary-unambiguous"
				},
				{
					"include": "#expression-binary-ambiguous"
				},
				{
					"include": "#expression-unary"
				},
				{
					"include": "#variable-reference-array"
				},
				{
					"include": "#variable-reference-hash"
				},
				{
					"include": "#variable-reference"
				}
			]
		},
		"expression-statement": {
			"name": "meta.expression.statement.bds",
			"patterns": [
				{
					"include": "#sys"
				},
				{
					"include": "#task"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#method-call"
				},
				{
					"include": "#assignment"
				},
				{
					"include": "#pre-increment"
				},
				{
					"include": "#post-increment"
				}
			]
		},
		"expression-binary-ambiguous": {
			"name": "meta.expression.binary.ambiguous.bds",
			"match": "(.*?)(?<![/\\*])(/|\\*)(?![/\\*])(.*)",
			"captures": {
				"1": {
					"name": "meta.expression.binary.ambiguous.lhs.bds",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"2": {
					"name": "keyword.operator.binary.expression"
				},
				"3": {
					"name": "meta.expression.binary.ambiguous.rhs.bds",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			}
		},
		"expression-binary-unambiguous": {
			"name": "meta.expression.binary.ambiguous.bds",
			"match": "(.*?)(\\-|\\+|%|==|!=|<=|>=|<|>|&&|\\|\\||\\||&|<<|>>|~|\\^)(.*)",
			"captures": {
				"1": {
					"name": "meta.expression.binary.unambiguous.lhs.bds",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"2": {
					"name": "keyword.operator.binary.expression"
				},
				"3": {
					"name": "meta.expression.binary.unambiguous.rhs.bds",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			}
		},
		"expression-unary": {
			"match": "(!|~)(.*)",
			"name": "meta.expression.unary.bds",
			"captures": {
				"1": {
					"name": "meta.expression.unary.expression.bds",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			}
		},
		"for-block": {
			"name": "meta.statement.for.block.bds",
			"begin": "\\s*(for)\\s*\\((.*?);(.*?);(.*?)\\)\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.for"
				},
				"2": {
					"name": "meta.statement.for.block.before.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"3": {
					"name": "meta.statement.for.block.cond.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"4": {
					"name": "meta.statement.for.block.after.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.for.block.block",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "\\}"
		},
		"for-standalone": {
			"name": "meta.statement.for.standalone.bds",
			"begin": "\\s*(for)\\s*\\((.*?);(.*?);(.*?)\\)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.for"
				},
				"2": {
					"name": "meta.statement.for.standalone.before.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"3": {
					"name": "meta.statement.for.standalone.cond.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"4": {
					"name": "meta.statement.for.standalone.after.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.for.standalone.statement",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "$"
		},
		"for-iterable-block": {
			"name": "meta.statement.for.iterable.block.bds",
			"begin": "\\s*(for)\\s*\\(\\s*(.*?)\\s*:\\s*(.*?)\\s*\\)\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.for"
				},
				"2": {
					"name": "meta.statement.for.iterable.block.variable",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"3": {
					"name": "meta.statement.for.iterable.block.iterable.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.for.iterable.block.block",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "\\}"
		},
		"for-iterable-standalone": {
			"name": "meta.statement.for.iterable.standalone.bds",
			"begin": "\\s*(for)\\s*\\((.*?):(.*?)\\)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.for"
				},
				"2": {
					"name": "meta.statement.for.iterable.standalone.variable",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"3": {
					"name": "meta.statement.for.iterable.standalone.iterable.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.for.iterable.standalone.block",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "$"
		},
		"function-call": {
			"name": "meta.function-call.bds",
			"begin": "([A-Za-z_$][\\w$]*)\\s*\\(",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.bds"
				}
			},
			"end": "\\)",
			"patterns": [
				{
					"include": "#args"
				}
			]
		},
		"if-block": {
			"name": "meta.statement.if.block.bds",
			"begin": "\\s*(if)\\s*\\((.*?)\\)\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.if"
				},
				"2": {
					"name": "meta.statement.if.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.if.block",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "\\}"
		},
		"if-standalone": {
			"name": "meta.statement.if.standalone.bds",
			"begin": "\\s*(if)\\s*\\((.*?)\\)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.if"
				},
				"2": {
					"name": "meta.statement.if.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.if.standalone",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "$"
		},
		"include": {
			"name": "string.include.single.bds",
			"begin": "\\s*(include)\\s+",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.bds"
				}
			},
			"end": "$"
		},
		"literals": {
			"name": "meta.literal.bds",
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#bools"
				}
			]
		},
		"method-call": {
			"name": "meta.method-call.bds",
			"begin": "([\\.\\w]+\\.)\\s*([A-Za-z_$][\\w$]*)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.period.bds"
				},
				"2": {
					"name": "entity.name.function.bds"
				},
				"3": {
					"name": "punctuation.definition.parameters.begin.bracket.round.bds"
				}
			},
			"contentName": "meta.method-call.args",
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.bracket.round.bds"
				}
			},
			"patterns": [
				{
					"include": "#args"
				}
			]
		},
		"numbers": {
			"name": "constant.numeric.decimal.bds",
			"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)"
		},
		"new": {
			"name": "meta.new.bds",
			"begin": "\\b(new)\\s+(\\w+)\\(",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.new"
				},
				"2": {
					"name": "entity.name.class"
				}
			},
			"patterns": [
				{
					"include": "#args"
				}
			],
			"end": "\\)"
		},
		"parens": {
			"patterns": [
				{
					"name": "meta.block.paren",
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.round.bds"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.round.bds"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.block.square.braces",
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.square.bds"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.square.bds"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"name": "meta.block.curly.braces",
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.curly.bds"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.curly.bds"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"pre-increment": {
			"name": "keyword.operator.increment-decrement.bds",
			"match": "(\\-\\-|\\+\\+)(.*)",
			"pattern": [
				{
					"2": {
						"name": "variable.name.preincrement.bds"
					}
				}
			]
		},
		"post-increment": {
			"name": "keyword.operator.increment-decrement.bds",
			"match": "(.*)(\\-\\-|\\+\\+)",
			"pattern": [
				{
					"1": {
						"name": "variable.name.postincrement.bds"
					}
				}
			]
		},
		"statement-block": {
			"name": "meta.statement.block.curly.braces",
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.bracket.curly.bds"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.bracket.curly.bds"
				}
			},
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"statement": {
			"name": "meta.statement.bds",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#class"
				},
				{
					"include": "#statement-standalone"
				},
				{
					"include": "#statement-unary"
				},
				{
					"include": "#statement-unary-paren"
				},
				{
					"include": "#while-block"
				},
				{
					"include": "#while-standalone"
				},
				{
					"include": "#if-block"
				},
				{
					"include": "#if-standalone"
				},
				{
					"include": "#include"
				},
				{
					"include": "#statement-with-block"
				},
				{
					"include": "#statement-with-standalone-block"
				},
				{
					"include": "#for-block"
				},
				{
					"include": "#for-standalone"
				},
				{
					"include": "#for-iterable-block"
				},
				{
					"include": "#for-iterable-standalone"
				},
				{
					"include": "#catch-block"
				},
				{
					"include": "#catch-standalone"
				},
				{
					"include": "#switch-block"
				},
				{
					"include": "#switch-case"
				},
				{
					"include": "#switch-default"
				},
				{
					"include": "#statement-block"
				},
				{
					"include": "#function-definition"
				},
				{
					"include": "#variable-definition"
				},
				{
					"include": "#expression-statement"
				}
			]
		},
		"statement-standalone": {
			"name": "keyword.statement.standalone.bds",
			"match": "\\s*(break|continue)\\s*"
		},
		"statement-unary": {
			"name": "meta.statement.unary.bds",
			"begin": "\\s*(breakpoint|checkpoint|debug|error|exit|kill|print|println|return|throw|wait|warning)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.statement.unary.bds"
				}
			},
			"contentName": "statement.unary.expression.bds",
			"patterns": [
				{
					"include": "#expression"
				}
			],
			"end": "$"
		},
		"statement-unary-paren": {
			"name": "meta.statement.unary.paren.bds",
			"begin": "\\s*(breakpoint|checkpoint|debug|error|exit|kill|print|println|return|throw|wait|warning)\\s*\\(",
			"beginCaptures": {
				"1": {
					"name": "keyword.statement.unary.bds"
				}
			},
			"contentName": "statement.unary.expression.bds",
			"patterns": [
				{
					"include": "#expression"
				}
			],
			"end": "\\)"
		},
		"statement-with-block": {
			"name": "meta.statement.with.block.bds",
			"begin": "\\s*(else|try|finally)\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				}
			},
			"contentName": "statement.with.block.statements",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "\\}"
		},
		"statement-with-standalone-block": {
			"name": "meta.statement.with.standalone.block.bds",
			"begin": "\\s*(else|try|finally)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				}
			},
			"contentName": "statement.with.standalone.block.statement",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "$"
		},
		"strings": {
			"patterns": [
				{
					"include": "#strings-double"
				},
				{
					"include": "#strings-single"
				}
			]
		},
		"strings-double": {
			"name": "string.quoted.double.bds",
			"match": "\"(.*)\"",
			"patterns": [
				{
					"name": "constant.character.escape.bds"
				}
			]
		},
		"strings-single": {
			"name": "string.quoted.single.bds",
			"begin": "'",
			"end": "'"
		},
		"sys": {
			"name": "string.sys.command",
			"begin": "\\s*(sys|task)\\b\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.sys.bare"
				}
			},
			"end": "[^\\\\](\\r)?\\n"
		},
		"switch-block": {
			"name": "meta.statement.switch.block.bds",
			"begin": "\\b(switch)\\s*\\((.*?)\\)\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.switch"
				},
				"2": {
					"name": "meta.statement.switch.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.switch.block",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "\\}"
		},
		"switch-case": {
			"name": "meta.statement.switch.case.block.bds",
			"match": "\\s*(case)\\s*(.*)\\s*:",
			"captures": {
				"1": {
					"name": "keyword.control.switch.case"
				},
				"2": {
					"name": "statement.switch.case.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			}
		},
		"switch-default": {
			"name": "meta.statement.switch.default.block.bds",
			"match": "\\s*(default)\\s*:",
			"captures": {
				"1": {
					"name": "keyword.control.switch.default"
				}
			}
		},
		"task": {
			"patterns": [
				{
					"include": "#task-params-block"
				},
				{
					"include": "#task-bare-params"
				}
			]
		},
		"task-bare-params": {
			"name": "string.task.statement",
			"begin": "\\s*(task)\\s*\\((.*)\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.task.bare.params"
				},
				"2": {
					"patterns": [
						{
							"include": "#statement"
						}
					]
				}
			},
			"end": "[^\\\\](\\r)?\\n"
		},
		"task-params-block": {
			"name": "string.task.statement",
			"begin": "\\s*(task|dep)\\s*(\\((.*)\\))?\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.task.params.block"
				},
				"2": {
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "}"
		},
		"type": {
			"patterns": [
				{
					"include": "#type-array"
				},
				{
					"include": "#type-hash"
				},
				{
					"include": "#type-primitive"
				}
			]
		},
		"type-array": {
			"name": "type.array",
			"match": "\\s*(bool|int|real|string|void|[A-Z]\\w*)\\s*\\[\\s*\\]",
			"captures": {
				"1": {
					"name": "storage.type.array.bds"
				}
			}
		},
		"type-hash": {
			"name": "type.hash",
			"match": "\\s*(bool|int|real|string|void|[A-Z]\\w*)\\s*\\{(.*)\\}",
			"captures": {
				"1": {
					"name": "storage.type.hash.bds"
				},
				"2": {
					"name": "storage.type.hash.key.bds",
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			}
		},
		"type-primitive": {
			"name": "storage.type.bds",
			"match": "\\s*(bool|int|real|string|void|[A-Z]\\w*)\\s*"
		},
		"variable-definition": {
			"name": "meta.variable.definition",
			"begin": "\\s*(bool|int|real|string|void|[A-Z]\\w*)(\\{.*\\})?(\\[\\s*\\])?\\s+",
			"beginCaptures": {
				"1": {
					"name": "storage.type.varible.definition.type",
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"2": {
					"name": "storage.type.varible.definition.key.type"
				},
				"3": {
					"name": "storage.type.varible.definition.key.type"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			],
			"end": "$"
		},
		"variable-reference": {
			"name": "variable.name.reference",
			"match": "([a-z_]\\w*)"
		},
		"variable-reference-array": {
			"name": "variable.name.array",
			"begin": "([a-z_]\\w*)\\[",
			"patterns": [
				{
					"name": "variable.reference.array.expression",
					"include": "#expression"
				}
			],
			"end": "\\]"
		},
		"variable-reference-hash": {
			"name": "variable.name.hash",
			"begin": "([a-z_]\\w*)\\{",
			"patterns": [
				{
					"name": "variable.reference.hash.expression",
					"include": "#expression"
				}
			],
			"end": "\\}"
		},
		"while-block": {
			"name": "meta.statement.while.bds",
			"begin": "\\s*(while)\\s*\\((.*?)\\)\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.while"
				},
				"2": {
					"name": "meta.statement.while.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.while.block",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "\\}"
		},
		"while-standalone": {
			"name": "meta.statement.while.standalone.bds",
			"match": "\\s*(while)\\s*\\((.*?)\\)(.*)$",
			"captures": {
				"1": {
					"name": "keyword.control.while"
				},
				"2": {
					"name": "meta.statement.while.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"3": {
					"name": "meta.statement.while.statement",
					"patterns": [
						{
							"include": "#statement"
						}
					]
				}
			}
		}
	},
	"scopeName": "source.bds"
}