{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "bds",
	"patterns": [
		{
			"include": "#code"
		}
	],
	"repository": {
		"all-types": {
			"patterns": [
				{
					"include": "#primitive-arrays"
				},
				{
					"include": "primitive-hash"
				},
				{
					"include": "#primitive-types"
				},
				{
					"include": "#object-types"
				}
			]
		},
		"args": {
			"name": "storage.args",
			"match": "(.*)(,(.*))*",
			"captures": {
				"1": {
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"2": {
					"patterns": [
						{
							"include": "#args"
						}
					]
				}
			}
		},
		"assignment": {
			"name": "keyword.operator.assignment.bds",
			"begin": "(\\w+)\\s*(=|:=|\\+=|\\-=|/=|\\*=|\\&=|\\|=)\\s*",
			"beginCaptures": {
				"1": {
					"name": "variable.other.definition.bds"
				},
				"2": {
					"name": "keyword.operator.assignment.bds"
				}
			},
			"end": "$",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"bools": {
			"patterns": [
				{
					"name": "keyword.control.bds",
					"match": "\\b(true|false)\\b"
				}
			]
		},
		"catch-block": {
			"name": "meta.statement.catch.block.bds",
			"begin": "\\b(catch)\\s*\\((.*?)\\)\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.catch"
				},
				"2": {
					"name": "meta.statement.catch.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.catch.block",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "\\}"
		},
		"catch-standalone": {
			"name": "meta.statement.catch.standalone.bds",
			"begin": "\\b(catch)\\s*\\((.*?)\\)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.catch"
				},
				"2": {
					"name": "meta.statement.catch.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.catch.standalone",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "$"
		},
		"class": {
			"begin": "(?=\\w?[\\w\\s-]*\\b(?:class)\\s+[\\w$]+)",
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.class.end.bracket.curly.bds"
				}
			},
			"name": "meta.class.bds",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "(class)\\s+(\\w+)",
					"captures": {
						"1": {
							"name": "storage.modifier.bds"
						},
						"2": {
							"name": "entity.name.type.class.bds"
						}
					},
					"name": "meta.class.identifier.bds"
				},
				{
					"match": "(extends)\\s+(\\w+)",
					"captures": {
						"1": {
							"name": "storage.modifier.bds"
						},
						"2": {
							"name": "entity.name.type.class.bds"
						}
					}
				},
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.class.begin.bracket.curly.bds"
						}
					},
					"end": "(?=})",
					"name": "meta.class.body.bds",
					"patterns": [
						{
							"include": "#code"
						}
					]
				}
			]
		},
		"code": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#class"
				},
				{
					"include": "#statement"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#all-types"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"include": "#comments-multi-line"
				},
				{
					"include": "#comments-inline-shebang"
				},
				{
					"include": "#comments-inline-hash"
				},
				{
					"include": "#comments-inline-help"
				},
				{
					"include": "#comments-inline-slash"
				},
				{
					"include": "#comments-help"
				}
			]
		},
		"comments-inline-hash": {
			"begin": "#",
			"end": "$",
			"name": "comment.line.hash.bds"
		},
		"comments-inline-help": {
			"begin": "\\b(help)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.help.bds"
				}
			},
			"end": "$",
			"name": "string.literal.help"
		},
		"comments-inline-shebang": {
			"begin": "#!",
			"end": "$",
			"name": "punctuation.section.embedded"
		},
		"comments-inline-slash": {
			"begin": "//",
			"end": "$",
			"name": "comment.line.slash.bds"
		},
		"comments-multi-line": {
			"begin": "/\\*",
			"end": "\\*/",
			"name": "comment.multi.line.bds"
		},
		"expression": {
			"patterns": [
				{
					"include": "#literals"
				},
				{
					"include": "#sys"
				},
				{
					"include": "#task"
				},
				{
					"include": "#new"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#method-call"
				},
				{
					"include": "#assignment"
				},
				{
					"include": "#pre-increment"
				},
				{
					"include": "#post-increment"
				},
				{
					"include": "#expression-binary"
				},
				{
					"include": "#expression-unary"
				},
				{
					"include": "#variable-name"
				}
			]
		},
		"expression-binary": {
			"match": "(.*?)(\\-|\\+|\\*|\\/|%|==|!=|<=|>=|<|>|&&|\\|\\||\\||&|<<|>>|~|\\^)(.*)",
			"name": "keyword.operator.expression.binary.bds",
			"captures": {
				"1": {
					"name": "variable.other.definition.bds",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"2": {
					"name": "keyword.operator.binary.expression"
				},
				"3": {
					"name": "variable.other.definition.bds",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			}
		},
		"expression-unary": {
			"match": "(!|~)(.*)",
			"name": "keyword.operator.unary.bds",
			"captures": {
				"1": {
					"name": "variable.other.definition.bds",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			}
		},
		"for-block": {
			"name": "meta.statement.for.block.bds",
			"begin": "\\s*(for)\\s*\\((.*?);(.*?);(.*?)\\)\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.for"
				},
				"2": {
					"name": "meta.statement.for.block.before.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"3": {
					"name": "meta.statement.for.block.cond.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"4": {
					"name": "meta.statement.for.block.after.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.for.block.block",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "\\}"
		},
		"for-standalone": {
			"name": "meta.statement.for.standalone.bds",
			"begin": "\\s*(for)\\s*\\((.*?);(.*?);(.*?)\\)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.for"
				},
				"2": {
					"name": "meta.statement.for.standalone.before.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"3": {
					"name": "meta.statement.for.standalone.cond.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"4": {
					"name": "meta.statement.for.standalone.after.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.for.standalone.statement",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "$"
		},
		"for-iterable-block": {
			"name": "meta.statement.for.iterable.block.bds",
			"begin": "\\s*(for)\\s*\\((.*?):(.*?)\\)\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.for"
				},
				"2": {
					"name": "meta.statement.for.iterable.block.variable",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"3": {
					"name": "meta.statement.for.iterable.block.iterable.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.for.iterable.block.block",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "\\}"
		},
		"for-iterable-standalone": {
			"name": "meta.statement.for.iterable.standalone.bds",
			"begin": "\\s*(for)\\s*\\((.*?):(.*?)\\)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.for"
				},
				"2": {
					"name": "meta.statement.for.iterable.standalone.variable",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"3": {
					"name": "meta.statement.for.iterable.standalone.iterable.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.for.iterable.standalone.block",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "$"
		},
		"function-call": {
			"begin": "([A-Za-z_$][\\w$]*)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.bds"
				},
				"2": {
					"name": "punctuation.definition.parameters.begin.bracket.round.bds"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.bracket.round.bds"
				}
			},
			"name": "meta.function-call.bds",
			"patterns": [
				{
					"include": "#args"
				}
			]
		},
		"if-block": {
			"name": "meta.statement.if.block.bds",
			"begin": "\\b(if)\\s*\\((.*?)\\)\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.if"
				},
				"2": {
					"name": "meta.statement.if.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.if.block",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "\\}"
		},
		"if-standalone": {
			"name": "meta.statement.if.standalone.bds",
			"begin": "\\b(if)\\s*\\((.*?)\\)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.if"
				},
				"2": {
					"name": "meta.statement.if.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.if.standalone",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "$"
		},
		"include": {
			"begin": "\\s*(include)\\s+",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.bds"
				}
			},
			"end": "$",
			"name": "string.include.single.bds"
		},
		"literals": {
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#bools"
				}
			]
		},
		"method-call": {
			"name": "meta.method-call.bds",
			"begin": "(\\.)\\s*([A-Za-z_$][\\w$]*)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.period.bds"
				},
				"2": {
					"name": "entity.name.function.bds"
				},
				"3": {
					"name": "punctuation.definition.parameters.begin.bracket.round.bds"
				}
			},
			"contentName": "meta.method-call.args",
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.bracket.round.bds"
				}
			},
			"patterns": [
				{
					"include": "#args"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
					"name": "constant.numeric.decimal.bds"
				}
			]
		},
		"new": {
			"begin": "\\b(new)\\s+(\\w+)\\(",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.new"
				},
				"2": {
					"name": "entity.name.class"
				}
			},
			"patterns": [
				{
					"include": "#args"
				}
			],
			"end": "\\)",
			"name": "punctuation.section.embedded"
		},
		"parens": {
			"patterns": [
				{
					"name": "meta.block.paren",
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.round.bds"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.round.bds"
						}
					},
					"patterns": [
						{
							"include": "#code"
						}
					]
				},
				{
					"name": "meta.block.square.braces",
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.square.bds"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.square.bds"
						}
					},
					"patterns": [
						{
							"include": "#code"
						}
					]
				},
				{
					"name": "meta.block.curly.braces",
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.curly.bds"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.curly.bds"
						}
					},
					"patterns": [
						{
							"include": "#code"
						}
					]
				}
			]
		},
		"pre-increment": {
			"match": "(\\-\\-|\\+\\+)(.*)",
			"name": "keyword.operator.increment-decrement.bds",
			"pattern": [
				{
					"2": {
						"name": "variable.other.definition.bds"
					}
				}
			]
		},
		"post-increment": {
			"match": "(.*)(\\-\\-|\\+\\+)",
			"name": "keyword.operator.increment-decrement.bds",
			"pattern": [
				{
					"1": {
						"name": "variable.other.definition.bds"
					}
				}
			]
		},
		"primitive-arrays": {
			"patterns": [
				{
					"begin": "\\b(bool|int|real|string)\\b\\s*(?=\\[)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.primitive.array.bds"
						}
					},
					"end": "(?!\\s*\\[)",
					"patterns": [
						{
							"include": "#parens"
						}
					]
				}
			]
		},
		"primitive-hash": {
			"patterns": [
				{
					"begin": "\\b(bool|int|real|string|void)\\b\\s*(?=\\{)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.primitive.array.bds"
						}
					},
					"end": "(?!\\s*\\})",
					"patterns": [
						{
							"include": "#parens"
						}
					]
				}
			]
		},
		"primitive-types": {
			"match": "\\b(bool|string|int|real|void)\\b",
			"name": "storage.type.primitive.bds"
		},
		"statement-block": {
			"name": "meta.statement.block.curly.braces",
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.bracket.curly.bds"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.bracket.curly.bds"
				}
			},
			"patterns": [
				{
					"include": "#code"
				}
			]
		},
		"statement": {
			"patterns": [
				{
					"include": "#keywords"
				},
				{
					"include": "#statement-standalone"
				},
				{
					"include": "#statement-unary"
				},
				{
					"include": "#statement-unary-paren"
				},
				{
					"include": "#while-block"
				},
				{
					"include": "#while-standalone"
				},
				{
					"include": "#if-block"
				},
				{
					"include": "#if-standalone"
				},
				{
					"include": "#include"
				},
				{
					"include": "#statement-with-block"
				},
				{
					"include": "#statement-with-standalone-block"
				},
				{
					"include": "#for-block"
				},
				{
					"include": "#for-standalone"
				},
				{
					"include": "#for-iterable-block"
				},
				{
					"include": "#for-iterable-standalone"
				},
				{
					"include": "#catch-block"
				},
				{
					"include": "#catch-standalone"
				},
				{
					"include": "#statement-block"
				},
				{
					"include": "#variables"
				},
				{
					"include": "#expression"
				}
			]
		},
		"statement-standalone": {
			"name": "keyword.statement.standalone.bds",
			"match": "\\s*(break|continue)\\s*"
		},
		"statement-unary": {
			"name": "meta.statement.unary.bds",
			"begin": "\\s*(breakpoint|checkpoint|debug|error|exit|kill|print|println|return|throw|wait|warning)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.statement.unary.bds"
				}
			},
			"contentName": "statement.unary.expression.bds",
			"patterns": [
				{
					"include": "#expression"
				}
			],
			"end": "$"
		},
		"statement-unary-paren": {
			"name": "meta.statement.unary.paren.bds",
			"begin": "\\s*(breakpoint|checkpoint|debug|error|exit|kill|print|println|return|throw|wait|warning)\\s*\\(",
			"beginCaptures": {
				"1": {
					"name": "keyword.statement.unary.bds"
				}
			},
			"contentName": "statement.unary.expression.bds",
			"patterns": [
				{
					"include": "#expression"
				}
			],
			"end": "\\)"
		},
		"statement-with-block": {
			"name": "meta.statement.with.block.bds",
			"begin": "\\s*(else|try|finally)\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				}
			},
			"contentName": "statement.with.block.statements",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "\\}"
		},
		"statement-with-standalone-block": {
			"name": "meta.statement.with.standalone.block.bds",
			"begin": "\\s*(else|try|finally)\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control"
				}
			},
			"contentName": "statement.with.standalone.block.statement",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "$"
		},
		"strings": {
			"patterns": [
				{
					"include": "#strings-double"
				},
				{
					"include": "#strings-single"
				}
			]
		},
		"strings-double": {
			"name": "string.quoted.double.bds",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.bds",
					"match": "\\\\."
				}
			]
		},
		"strings-single": {
			"name": "string.quoted.single.bds",
			"begin": "'",
			"end": "'"
		},
		"sys": {
			"name": "string.sys.command",
			"begin": "\\s*(sys|task)\\b\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.sys.bare"
				}
			},
			"end": "[^\\\\](\\r)?\\n"
		},
		"task": {
			"patterns": [
				{
					"include": "#task-params-block"
				},
				{
					"include": "#task-bare-params"
				}
			]
		},
		"task-bare-params": {
			"name": "string.task.statement",
			"begin": "\\s*(task)\\s*\\((.*)\\)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.task.bare.params"
				},
				"2": {
					"patterns": [
						{
							"include": "#code"
						}
					]
				}
			},
			"end": "[^\\\\](\\r)?\\n"
		},
		"task-params-block": {
			"name": "string.task.statement",
			"begin": "\\s*(task|dep)\\s*(\\((.*)\\))?\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.task.params.block"
				},
				"2": {
					"patterns": [
						{
							"include": "#code"
						}
					]
				}
			},
			"patterns": [
				{
					"include": "#code"
				}
			],
			"end": "}"
		},
		"variable-name": {
			"name": "variable.other.name",
			"match": "([A-Za-z]\\w+)"
		},
		"variables": {
			"begin": "(?x)\n(?=\n  \\b\n  (\n    (void|bool|int|real|string)\n    |\n    (?>(\\w+\\.)*[A-Z_]+\\w*) # e.g. `bdsx.ws.rs.Response`, or `String`\n  )\n  \\b\n  \\s*\n  (\n    <[\\w<>,\\.?\\s\\[\\]]*> # e.g. `HashMap<Integer, String>`, or `List<bds.lang.String>`\n  )?\n  \\s*\n  (\n    (\\[\\])* # int[][]\n  )?\n  \\s+\n  [A-Za-z_$][\\w$]* # At least one identifier after space\n  ([\\w\\[\\],$][\\w\\[\\],\\s]*)? # possibly primitive array or additional identifiers\n  \\s*(=|$)\n)",
			"end": "(?=\\=|:|;|$)",
			"name": "meta.definition.variable.bds",
			"patterns": [
				{
					"match": "([A-Za-z$_][\\w$]*)(?=\\s*(\\[\\])*\\s*(=|,|$))",
					"captures": {
						"1": {
							"name": "variable.other.definition.bds"
						}
					}
				},
				{
					"include": "#all-types"
				},
				{
					"include": "#code"
				}
			]
		},
		"while-block": {
			"name": "meta.statement.while.bds",
			"begin": "\\s*(while)\\s*\\((.*?)\\)\\s*\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.while"
				},
				"2": {
					"name": "meta.statement.while.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			},
			"contentName": "statement.while.block",
			"patterns": [
				{
					"include": "#statement"
				}
			],
			"end": "\\}"
		},
		"while-standalone": {
			"name": "meta.statement.while.standalone.bds",
			"match": "\\s*(while)\\s*\\((.*?)\\)(.*)$",
			"captures": {
				"1": {
					"name": "keyword.control.while"
				},
				"2": {
					"name": "meta.statement.while.expression",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				"3": {
					"name": "meta.statement.while.statement",
					"patterns": [
						{
							"include": "#statement"
						}
					]
				}
			}
		}
	},
	"scopeName": "source.bds"
}