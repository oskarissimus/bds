#!/usr/bin/env bds


a := 'asdfasdf'
z := 34 + fsdf(a + x)

zx = 42
zx = zx + 1 * f(45)
b += 1
b -= 1
b /= 2
b *= 4
b &= 345
b |= 234

if( as < 42 ) {
    while( a++ < 10) {
        println "hi"
        if( a < 5 ) {
            continue
        }
        println "sadfasdf"
    }
}

break

func(12, 34+2 * (   1 +2), 4564 * 12)


// Comment
# Comment

int[] sdf   help asfasdfjhaskjdhfkd
// int asa
// string sad
// bool[] bsdf
// string sadfa, asdf
// string{} strs

// Demux demux
// Demux[] demuxes

while(i < 10) {
    f(i++)
}

sys echo 'hi' \
    cat z.txt \
    | grep test \
    | head -n 10





string s = 54674

# Multi-line literal
string ss = "asdf
asdfasdf
asdfasdfs
asdfasdf
asdfasdfasd"


class Demux extends Pipeline {

    // OK
    string sads
    int asdf
    string[] sadfas
    string{} strs
    Sample[] samples

    /* OK */ 

    void Demux(int val) {
        val.read().split('\n')
    }

    int func(string s) {
        try {
            println('sadfasf')
        } catch(Exception n) {
            println('nothing to do')
        } finally {
            println('Finally')
        }
        return 'hi'
    }
}

class Demux {
    string sads
    int asdf

    void Demux(int val) {
        val.read().split('\n')

        sys echo 'hi'
        task echo 'asdf' \
            sadfasdf
            asfasdfjhaskjdhfkd

    }
}

int func(int x, real re, string str, Demux demux) {
    // My function
    return x + 23
}

task(mem = 3*G, ffpga=1) sys cat x.txt \
    | grep hi \
    | head -n 1


task(mem = 3*G, ffpga=1, cpus=calc(6) ) cat x.txt \
    | grep hi \
    | head -n 1

task(mem = 3*G, ffpga=1, cpus=calc(6)) {
    println "Starts"
    sys cat x.txt \
        | grep hi \
        | head -n 1
    sys echo 'Hi' there
    func(a + 234)
    println "End"
}
